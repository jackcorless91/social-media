// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  clerkId   String   @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now()) // member since x
  updatedAt DateTime @updatedAt

  posts    Post[]
  comments Comment[]
  likes    Like[]

  followers Follows[] @relation("following") // user follows x user
  following Follows[] @relation("follower") // users this user follows

  notifications        Notifications[]        @relation("userNotifications") //notifs received
  notificationsCreated NotificationsCreated[] @relation("notificationCreator") // notifs sent by user
}

model Post {
  id       String  @id @default(cuid())
  aithorId String
  content  String?
  image    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [aithorId], references: [id], onDelete: Cascade)

  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())

  // relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([authorId, postId])
}

model Like {
}
